---
description: 
globs: 
alwaysApply: true
---
# 开发流程规则

## 环境配置

### 开发环境启动
推荐使用 Docker 开发环境，支持热重载：

```bash
# 启动完整开发环境
docker-compose -f docker-compose.dev.yml up -d

# 查看服务状态
docker-compose -f docker-compose.dev.yml ps

# 查看日志
docker-compose -f docker-compose.dev.yml logs -f [service_name]

# 停止环境
docker-compose -f docker-compose.dev.yml down
```

参考 [docker-compose.dev.yml](mdc:docker-compose.dev.yml) 了解开发环境配置。

### 服务端口
- **前端**: http://localhost:3000 (热重载)
- **后端**: http://localhost:8080 (自动重启)
- **MySQL**: localhost:3306
- **Redis**: localhost:6379

### 默认账户
- 用户名: `admin`
- 密码: `admin123`

## 项目初始化

### 后端初始化
```bash
cd backend
go mod download
go run main.go  # 单独运行后端
```

### 前端初始化
```bash
cd frontend
npm install
npm start  # 单独运行前端
```

## 开发规范

### 分支管理
遵循 Git Flow 工作流：

- **main**: 生产分支，只接受来自 develop 的合并
- **develop**: 开发主分支，功能开发完成后合并到此分支
- **feature/***: 功能分支，从 develop 分出，完成后合并回 develop
- **hotfix/***: 紧急修复分支，从 main 分出，修复后合并到 main 和 develop

### 功能开发流程

1. **创建功能分支**
```bash
git checkout develop
git pull origin develop
git checkout -b feature/asset-search
```

2. **开发功能**
- 按照 [代码规范](mdc:.cursor/rules/03-coding-standards.mdc) 编写代码
- 遵循 [API 设计规范](mdc:.cursor/rules/04-api-design.mdc)
- 添加必要的测试用例

3. **提交代码**
```bash
# 遵循约定式提交规范
git add .
git commit -m "feat(asset): 添加资产搜索功能"
git push origin feature/asset-search
```

4. **创建 Pull Request**
- 填写详细的 PR 描述
- 关联相关 Issue
- 请求代码审查

5. **代码审查通过后合并**

## 调试和测试

### 后端调试
```bash
# 查看后端日志
docker logs building-asset-backend-dev -f

# 进入后端容器
docker exec -it building-asset-backend-dev sh

# 运行测试
cd backend && go test ./...

# API 测试
curl -X POST http://localhost:8080/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}'
```

### 前端调试
```bash
# 查看前端日志
docker logs building-asset-frontend-dev -f

# 进入前端容器
docker exec -it building-asset-frontend-dev sh

# 运行测试
cd frontend && npm test

# 构建检查
cd frontend && npm run build
```

### 数据库调试
```bash
# 连接 MySQL
docker exec -it building-asset-mysql mysql -uroot -proot123 building_asset

# 查看数据
USE building_asset;
SHOW TABLES;
SELECT * FROM users;
```

## 常见开发任务

### 添加新的 API 端点

1. **后端实现**
   - 在 [backend/internal/model/](mdc:backend/internal/model) 添加数据模型
   - 在 [backend/internal/service/](mdc:backend/internal/service) 添加业务逻辑
   - 在 [backend/api/v1/](mdc:backend/api/v1) 添加 API 处理器
   - 在 [backend/router/router.go](mdc:backend/router/router.go) 注册路由

2. **前端接入**
   - 在 [frontend/src/types/](mdc:frontend/src/types) 添加类型定义
   - 在 [frontend/src/services/](mdc:frontend/src/services) 添加 API 服务
   - 在相应页面组件中调用 API

### 添加新页面

1. **创建页面组件**
```bash
# 在 frontend/src/pages/ 下创建新组件
mkdir frontend/src/pages/new-feature
touch frontend/src/pages/new-feature/NewFeature.tsx
```

2. **添加路由**
编辑 [frontend/src/App.tsx](mdc:frontend/src/App.tsx) 添加路由配置。

3. **更新菜单**
编辑 [frontend/src/components/layout/MainLayout.tsx](mdc:frontend/src/components/layout/MainLayout.tsx) 添加菜单项。

### 数据库变更

1. **修改模型**
编辑 [backend/internal/model/](mdc:backend/internal/model) 下的模型文件。

2. **数据迁移**
GORM 支持自动迁移，在 [backend/main.go](mdc:backend/main.go) 中添加迁移代码：
```go
db.AutoMigrate(&model.NewModel{})
```

## 部署流程

### 开发环境部署
开发环境使用 Docker Compose 自动部署，支持热重载。

### 生产环境部署
```bash
# 构建生产镜像
docker-compose build

# 启动生产环境
docker-compose up -d

# 查看状态
docker-compose ps
```

参考 [docker-compose.yml](mdc:docker-compose.yml) 了解生产环境配置。

## 故障排除

### 常见问题

1. **端口冲突**
```bash
# 检查端口占用
lsof -i :3000
lsof -i :8080

# 停止冲突的服务
docker-compose -f docker-compose.dev.yml down
```

2. **权限问题**
```bash
# 修复文件权限
sudo chown -R $USER:$USER .
```

3. **数据库连接失败**
```bash
# 重启数据库服务
docker-compose -f docker-compose.dev.yml restart mysql

# 检查数据库状态
docker-compose -f docker-compose.dev.yml logs mysql
```

4. **前端构建失败**
```bash
# 清理缓存重新安装
cd frontend
rm -rf node_modules package-lock.json
npm install
```

5. **后端编译失败**
```bash
# 清理模块缓存
cd backend
go clean -cache
go mod download
```

### 日志查看
```bash
# 查看所有服务日志
docker-compose -f docker-compose.dev.yml logs

# 查看特定服务日志
docker-compose -f docker-compose.dev.yml logs backend
docker-compose -f docker-compose.dev.yml logs frontend
docker-compose -f docker-compose.dev.yml logs mysql
```

## 性能优化

### 后端优化
- 使用数据库索引优化查询性能
- 实现 Redis 缓存减少数据库压力
- 使用 GORM 预加载避免 N+1 查询问题

### 前端优化
- 使用 React.memo 避免不必要的重渲染
- 实现虚拟滚动处理大量数据
- 使用 Ant Design 的按需加载减少包大小

## 文档维护

### 更新文档
当修改 API 或添加新功能时，及时更新相关文档：

- [API 文档](mdc:docs/api/reference.md)
- [技术文档](mdc:docs/architecture)
- [使用指南](mdc:docs/guides)

### 代码注释
- 为复杂的业务逻辑添加注释
- 为导出的函数和类型添加文档注释
- 保持注释与代码同步

## 质量保证

### 代码审查检查清单
- [ ] 功能是否符合需求
- [ ] 代码是否遵循项目规范
- [ ] 是否有适当的错误处理
- [ ] 是否有安全漏洞
- [ ] 性能是否可接受
- [ ] 是否添加了测试用例
- [ ] 文档是否更新

详细的贡献指南参考 [CONTRIBUTING.md](mdc:CONTRIBUTING.md)。
