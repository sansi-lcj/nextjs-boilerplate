---
description: 
globs: 
alwaysApply: true
---
# API 设计规则

## 基础设计原则

### RESTful API 规范
- **基础 URL**: `http://localhost:8080/api/v1`
- **认证方式**: JWT Bearer Token
- **数据格式**: JSON (UTF-8)
- **HTTP 方法**: GET, POST, PUT, DELETE

### 统一响应格式
所有 API 响应必须遵循统一格式，实现在 [backend/pkg/response/](mdc:backend/pkg/response):

```json
{
  "code": 200,
  "message": "success",
  "data": {},
  "timestamp": 1704096000000
}
```

### 状态码定义
- `200` - 操作成功
- `400` - 请求参数错误
- `401` - 未认证/Token 无效
- `403` - 无权限访问
- `404` - 资源不存在
- `500` - 服务器内部错误

## 核心业务 API

### 认证 API
路径: `/api/v1/auth/*`，实现在 [backend/api/v1/auth.go](mdc:backend/api/v1/auth.go)

```http
POST /auth/login     # 用户登录
POST /auth/logout    # 用户登出
POST /auth/refresh   # 刷新 Token
GET  /me            # 获取当前用户信息
```

### 资产管理 API
路径: `/api/v1/assets/*`，实现在 [backend/api/v1/asset.go](mdc:backend/api/v1/asset.go)

```http
GET    /assets           # 获取资产列表
GET    /assets/{id}      # 获取资产详情
POST   /assets           # 创建资产
PUT    /assets/{id}      # 更新资产
DELETE /assets/{id}      # 删除资产
```

### 建筑管理 API
路径: `/api/v1/buildings/*`

```http
GET    /buildings        # 获取建筑列表
GET    /buildings/{id}   # 获取建筑详情
POST   /buildings        # 创建建筑
PUT    /buildings/{id}   # 更新建筑
DELETE /buildings/{id}   # 删除建筑
```

### 楼层管理 API
路径: `/api/v1/floors/*`

```http
GET    /floors           # 获取楼层列表
GET    /floors/{id}      # 获取楼层详情
POST   /floors           # 创建楼层
PUT    /floors/{id}      # 更新楼层
DELETE /floors/{id}      # 删除楼层
```

### 房间管理 API
路径: `/api/v1/rooms/*`

```http
GET    /rooms            # 获取房间列表
GET    /rooms/{id}       # 获取房间详情
POST   /rooms            # 创建房间
PUT    /rooms/{id}       # 更新房间
DELETE /rooms/{id}       # 删除房间
```

### 系统管理 API
路径: `/api/v1/*`，实现在 [backend/api/v1/system.go](mdc:backend/api/v1/system.go)

```http
# 用户管理
GET    /users           # 获取用户列表
GET    /users/{id}      # 获取用户详情
POST   /users           # 创建用户
PUT    /users/{id}      # 更新用户
DELETE /users/{id}      # 删除用户

# 角色管理
GET    /roles           # 获取角色列表
GET    /roles/{id}      # 获取角色详情
POST   /roles           # 创建角色
PUT    /roles/{id}      # 更新角色
DELETE /roles/{id}      # 删除角色

# 组织管理
GET    /organizations   # 获取组织列表
GET    /organizations/tree  # 获取组织树
GET    /organizations/{id}  # 获取组织详情
POST   /organizations   # 创建组织
PUT    /organizations/{id}  # 更新组织
DELETE /organizations/{id}  # 删除组织

# 权限管理
GET    /permissions     # 获取权限列表
GET    /permissions/tree  # 获取权限树

# 菜单管理
GET    /menus           # 获取菜单列表
GET    /menus/tree      # 获取菜单树
GET    /menus/user      # 获取用户菜单
```

### 统计分析 API
路径: `/api/v1/statistics/*`

```http
GET /statistics/assets   # 获取资产统计数据
GET /map/assets         # 获取地图点位数据
```

## 查询参数规范

### 分页参数
```http
GET /assets?page=1&page_size=20&total=true
```
- `page`: 页码，默认 1
- `page_size`: 每页数量，默认 20，最大 100
- `total`: 是否返回总数，默认 false

### 搜索过滤
```http
GET /assets?asset_name=test&status=active&street_id=1
```
- 字段名采用 snake_case
- 支持模糊查询的字段使用 `%keyword%` 匹配
- 多个条件使用 AND 逻辑

### 排序参数
```http
GET /assets?sort=created_at&order=desc
```
- `sort`: 排序字段
- `order`: 排序方向 (asc/desc)

## 请求/响应示例

### 登录请求
```http
POST /api/v1/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123"
}
```

### 登录响应
```json
{
  "code": 200,
  "message": "登录成功",
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIs...",
    "user": {
      "id": 1,
      "username": "admin",
      "name": "系统管理员",
      "roles": ["admin"]
    }
  },
  "timestamp": 1704096000000
}
```

### 资产列表响应
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "list": [
      {
        "id": 1,
        "asset_code": "AS001",
        "asset_name": "创新大厦",
        "address": "科技路100号",
        "total_area": 50000.0,
        "status": "normal"
      }
    ],
    "page": 1,
    "page_size": 20,
    "total": 1
  },
  "timestamp": 1704096000000
}
```

## 认证与授权

### JWT Token 使用
```http
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

### 权限检查
- 所有受保护的 API 都需要有效的 JWT Token
- 基于角色的访问控制 (RBAC)
- 权限码格式: `module:action` (如 `asset:create`, `user:list`)

参考 [backend/internal/middleware/](mdc:backend/internal/middleware) 中的认证中间件实现。

## 错误处理

### 错误响应格式
```json
{
  "code": 400,
  "message": "参数验证失败",
  "data": {
    "errors": [
      {
        "field": "asset_name",
        "message": "资产名称不能为空"
      }
    ]
  },
  "timestamp": 1704096000000
}
```

### 常见错误场景
- 参数验证失败 (400)
- Token 过期或无效 (401)
- 权限不足 (403)
- 资源不存在 (404)
- 业务逻辑错误 (500)

## 前端 API 调用

### API 服务层
前端 API 调用统一通过 [frontend/src/services/](mdc:frontend/src/services) 目录下的服务进行:

```typescript
// 参考 frontend/src/services/asset.ts
export const assetService = {
  async getAssets(params?: AssetQueryParams) {
    const response = await get('/assets', params);
    return response.data;
  },

  async createAsset(data: CreateAssetRequest) {
    const response = await post('/assets', data);
    return response.data;
  }
};
```

### 统一请求工具
使用 [frontend/src/utils/request.ts](mdc:frontend/src/utils/request.ts) 中的统一请求工具，自动处理:
- Token 添加
- 响应拦截
- 错误处理
- 请求重试

## API 测试

### 开发调试
```bash
# 健康检查
curl http://localhost:8080/health

# 登录获取 Token
curl -X POST http://localhost:8080/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}'

# 使用 Token 访问保护资源
curl -H "Authorization: Bearer TOKEN" \
  http://localhost:8080/api/v1/assets
```

### API 文档
详细的 API 文档参考:
- [完整 API 参考](mdc:docs/api/reference.md)
- [认证机制说明](mdc:docs/api/authentication.md)
- [错误处理文档](mdc:docs/api/errors.md)
- [分页处理说明](mdc:docs/api/pagination.md)
